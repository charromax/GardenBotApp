# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Comment {
    body: String!
    createdAt: String!
    id: ID!
    username: String!
}

type Device {
    createdAt: String!
    deviceName: String!
    id: ID!
    isActivated: Boolean
}

type Like {
    createdAt: String!
    id: ID!
    username: String!
}

type Measure {
    airHum: Float!
    airTemp: Float!
    createdAt: String!
    deviceId: ID!
    id: ID!
    soilHum: Float!
}

type Mutation {
    activateDevice(deviceName: String!, userId: ID!): Device!
    addMeasure(airHum: Float!, airTemp: Float!, deviceId: ID!, soilHum: Float!): Measure!
    addNotification(code: Int!, deviceId: ID!, message: String!): Notification!
    createComment(body: String!, postId: ID!): Post!
    createPost(body: String!): Post!
    deleteComment(commentId: ID!, postId: ID!): Post!
    deletePost(postId: ID!): String!
    likeDislike(postId: ID!): Post!
    login(password: String!, username: String!): User!
    register(registerInput: RegisterInput): User!
    registerNewDevice(deviceName: String!): Device!
    renameDevice(deviceId: ID!, newName: String!): User!
    sendMqttOrder(payload: Payload): String!
}

type Notification {
    code: Int!
    createdAt: String!
    deviceId: ID!
    id: ID!
    message: String!
}

type Post {
    body: String!
    commentCount: Int!
    comments: [Comment]!
    createdAt: String!
    id: ID!
    likeCount: Int!
    likes: [Like]!
    username: String!
}

type Query {
    getAllDevices: [Device]!
    getMeasures(deviceId: ID!): [Measure]!
    getPost(postId: ID!): Post
    getPosts: [Post]
    refreshToken: String!
}

type Subscription {
    newDevice(devName: String!): Device!
    newMeasure(devId: ID!): Measure!
    newNotification(devId: ID!): Notification!
    newPost: Post!
}

type User {
    count: Int!
    createdAt: String!
    deviceCount: Int!
    devices: [Device]!
    email: String!
    id: ID!
    token: String!
    username: String!
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

input Order {
    action: Boolean!
    device_pin: Int!
}

input Payload {
    deviceId: ID!
    order: Order!
    type: String!
}

input RegisterInput {
    confirmPassword: String!
    email: String!
    password: String!
    username: String!
}


"The `Upload` scalar type represents a file upload."
scalar Upload